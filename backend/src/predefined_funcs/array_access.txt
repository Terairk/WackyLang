_arrLoad4:
	# Special calling convention: array ptr passed in R9, index in R10, and return into R9
	pushq %rbx
	# `test r, r` is equivalent to `cmp r, 0`
	testl %r10d, %r10d
	cmovl %r10, %rsi # this must be a 64-bit move so that it doesn't truncate if the move fails
	jl _errOutOfBounds
	movl -4(%r9), %ebx
	cmpl %ebx, %r10d
	cmovge %r10, %rsi # this must be a 64-bit move so that it doesn't truncate if the move fails
	jge _errOutOfBounds
	movl (%r9,%r10,4), %r9d
	popq %rbx
	ret

.section .rodata
# length of .L._errOutOfBounds_str0
	.int 42
.L._errOutOfBounds_str0:
	.asciz "fatal error: array index %d out of bounds\n"
.text
_errOutOfBounds:
	# external calls must be stack-aligned to 16 bytes, accomplished by masking with fffffffffffffff0
	andq $-16, %rsp
	leaq .L._errOutOfBounds_str0(%rip), %rdi
	# on x86, al represents the number of SIMD registers used as variadic arguments
	movb $0, %al
	call printf@plt
	movq $0, %rdi
	call fflush@plt
	movb $-1, %dil
	call exit@plt
	
