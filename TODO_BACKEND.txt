1) When I implement VarDefinition and Assignment:
  Use the func_table to rename func calls cus they aren't done properly rn
  Though I will implement lower_rvalue right now (even if its not being used) for calls

2) I need to figure out what info i want to store about types:
Some ideas: their size, their alignment
For arrays: need to store the size of the fat pointer + size of elements
For pairs: I need to store the pointer size + inner elements probs?

============== CURRENT TASK = 3 ============
3) Do more stuff until div works correctly, cmp is invalid currently (a)
Currently doing other boolean operators (but AND,OR are meant for ints) - we can make this better by using
the fact that we only get bools in WACC (need symbol table for Wacky types)

4) Counter for String Literals

5) TODO: proper implementation of chars (research is shown below)
Note that we can use movzbl to move from byte to long word. Might be useful for chars/bools
ordAndchrExpr.wacc is nice to analyse - movb is used for println chr while we have a
	movzbl %r12b, %eax
	movl %eax, %edi
if we do println ord chr. Which is interesting

Meanwhile with chr, this occurs. -128 will match will all invalid chrs.
Honestly im surprised these things can even occur with the errors from the frontend
but ig unsoundness from pair coercion could theoretically occur
movl %r12d, %eax
testl $-128, %eax
cmovne %rax, %rsi # this must be a 64-bit move so that it doesn't truncate if the move fails

6) Research how to do bools by observing the reference compiler

7) Assembly AST doesn't have reads / other functions, is that fine or is that gonna be a
call by the WackyIR -> AssemblyAST transformation. I feel like GenFlags definitely needs to be
in a utility crate for sure. Different levels of the IR have an easier time adding flags
especially when printing. Only the backend needs the actual translation from GenFlags to strings.



=============== DONE ====================================

3) Implement runtime errors (using our GenStruct flags) when doing some binary operations
  a) Runtime error when overflowing/underflowing in add/sub/multiple
  b) Checking that dividend is 0

Currently the check that dividend is 0 is done in WackIR -> AstTransformation
Maybe we should move it earlier up in the hierarchy?

Need to research how storing a 4 byte value into a 8 byte memory space works (DONE)

Note:
PairElem on RValue doesn't have a type so I have to either:
a) Add types to enumPairElem
b) Add a type to RValue::PairElem (similar to how LValue has it)
c) Deal with it on caller side and wrangle multiple times

I ended up choosing add types to RValue::PairElem.
