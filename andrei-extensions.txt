# Int literals: binary, octal, hex
- supports `0b` `0B` (binary), `0o` `0O` (octal), and `0x` `0X` (hex)
- written 3 basic tests in /valid/expressions
- TODO: write more tests around all the edge cases of that

# Bitwise ops: NOT (~), AND (&), XOR (^), OR (|)
- added support to frontend for them
- precedence is:
- + ...all the rest of higher precedence unmodified
- + equality (==, !=)
- + b-and (&)
- + b-xor (^)
- + b-or (|)
- + l-and (&&)
- + l-or (||)
- TODO: implement support for middle/backend for them
- TODO: write more tests around all the edge cases of that

# Expression if-conditional
- added if-elif-else expressions with syntax: `if <expr> then <expr> (elif <expr> then <expr>)* else <expr> fi`
- TODO: write more tests around all the edge cases of that

# More types of if-statements: (maybe switch/match??)
- added if-elif-else statements with syntax: `if <expr> then <stmt> (elif <expr> then <stmt>)* else <stmt> fi`
- added if-elif-only statements with syntax: `if <expr> then <stmt> (elif <expr> then <stmt>)* fi`
- removed one test from CI which was testing for presence of "else" in if statements
- TODO: write more tests around all the edge cases of that

# More types of loop-related constructs: do-while, loop, break, nextloop
- added `do-while` statement with syntax: `do <stmt> while <expr> done`
- added `loop-do` statement with syntax `loop do <stmt> done`
- added `break` and `nextloop` statements to be used inside loops
- + `break` breaks out of the loop
- + `nextloop` skips to the start of the next iteration of the loop
- added support for explicit loop labels
- + with syntax `<ident>: <loop-stmt>` for loop statements
- + with syntax `break <ident>` and `nextloop <ident>` for `break`/`nextloop` keywords
- TODO: write more tests around all the edge cases of that

# Tail-Recursion Optimisation
- directly self-recursive functions are optimized into loops
- added an optional `tailrec` modifier:
- + it has the following syntax: `tailrec <func>`
- + if present, the function being tail-recursive is enforced by the compiler
- TODO: write tests, and measure performance