.globl main
.section .rodata
# length of .L.str0
	.int 31
.L.str0:
	.asciz "input an integer to continue..."
.text
main:
	pushq %rbp
	# pushq {%rbx, %r12}
	subq $16, %rsp
	movq %rbx, (%rsp)
	movq %r12, 8(%rsp)
	movq %rsp, %rbp
	movl $10, %r12d
	leaq .L.str0(%rip), %rdi
	# statement primitives do not return results (but will clobber r0/rax)
	call _prints
	call _println
	# load the current value in the destination of the read so it supports defaults
	movl %r12d, %edi
	call _readi
	movl %eax, %r12d
	movq $0, %rax
	# popq/peekq {%rbx, %r12}
	movq (%rsp), %rbx
	movq 8(%rsp), %r12
	addq $16, %rsp
	popq %rbp
	ret

.section .rodata
# length of .L._prints_str0
	.int 4
.L._prints_str0:
	.asciz "%.*s"
.text
_prints:
	pushq %rbp
	movq %rsp, %rbp
	# external calls must be stack-aligned to 16 bytes, accomplished by masking with fffffffffffffff0
	andq $-16, %rsp
	movq %rdi, %rdx
	movl -4(%rdi), %esi
	leaq .L._prints_str0(%rip), %rdi
	# on x86, al represents the number of SIMD registers used as variadic arguments
	movb $0, %al
	call printf@plt
	movq $0, %rdi
	call fflush@plt
	movq %rbp, %rsp
	popq %rbp
	ret

.section .rodata
# length of .L._println_str0
	.int 0
.L._println_str0:
	.asciz ""
.text
_println:
	pushq %rbp
	movq %rsp, %rbp
	# external calls must be stack-aligned to 16 bytes, accomplished by masking with fffffffffffffff0
	andq $-16, %rsp
	leaq .L._println_str0(%rip), %rdi
	call puts@plt
	movq $0, %rdi
	call fflush@plt
	movq %rbp, %rsp
	popq %rbp
	ret

.section .rodata
# length of .L._readi_str0
	.int 2
.L._readi_str0:
	.asciz "%d"
.text
_readi:
	pushq %rbp
	movq %rsp, %rbp
	# external calls must be stack-aligned to 16 bytes, accomplished by masking with fffffffffffffff0
	andq $-16, %rsp
	# RDI contains the "original" value of the destination of the read
	# allocate space on the stack to store the read: preserve alignment!
	# the passed default argument should be stored in case of EOF
	subq $16, %rsp
	movl %edi, (%rsp)
	leaq (%rsp), %rsi
	leaq .L._readi_str0(%rip), %rdi
	# on x86, al represents the number of SIMD registers used as variadic arguments
	movb $0, %al
	call scanf@plt
	movl (%rsp), %eax
	addq $16, %rsp
	movq %rbp, %rsp
	popq %rbp
	ret
